<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- spring 定时器 -->
	<!-- <task:annotation-driven scheduler="qbScheduler" mode="proxy"/> <task:scheduler 
		id="qbScheduler" pool-size="10"/> -->
	<!-- org.springframework.stereotype.Service org.springframework.stereotype.Repository 
		org.springframework.stereotype.Controller 代表3种注解 context:include-filter 代表要扫描 
		context:exclude-filter 代表不扫描 没有 controller注解的类默认不支持事务 -->
	<context:component-scan base-package="com.swuorange" />

	<!--配置事务管理器(mybatis采用的是JDBC的事务管理器) -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- #### ActiveMq配置 start #### -->
	<!-- 1. ActiveMq连接工厂 -->
	<bean id="activeMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
		<property name="userName" value="system" />
		<property name="password" value="manager" />
	</bean>
	<!--2. Spring Caching 连接工厂(类似数据库线程池的东西，减少连接的创建。) -->
	<!-- 由于jmsTemplate每次发送消息都需要创建连接和创建session了，所以引入这个类似连接池的连接工厂，优化Mq的性能 -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<!-- 目标连接工厂 指向 ActiveMq工厂 -->
		<property name="targetConnectionFactory" ref="activeMQConnectionFactory" />
		<!-- session缓存的最大个数 -->
		<property name="sessionCacheSize" value="100" />
	</bean>
	<!-- 3.配置jmsTemplate，用于发送发送mq消息 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 设置 jmsTemplate 不支持订阅模式，即：只支持queue模式。 如果项目需要同时支持queue和topic，那么就需要另外注册一个jmsTemplate（把pubSubDomain设为true） -->
		<property name="pubSubDomain" value="false"></property>
	</bean>
	<!-- 4.定义Queue监听器 -->
	<jms:listener-container destination-type="queue"
		connection-factory="connectionFactory">
		<!-- TODO 每添加一个queue的监听，都需要在这里添加一个配置 -->
		<!-- 这样配置就可以方便的对多个队列监听 , 每增加一个队列只需要添加一个 jms:listener -->
		<!-- destination:队列名称, ref:指向对应的监听器对象 -->
		<!-- 示例:  -->
		<jms:listener destination="swu" ref="activeMQConsumerListener" />
	</jms:listener-container>



	<!--配置基于注解的声明式事务,默认使用注解来管理事务行为 -->
	<tx:annotation-driven transaction-manager="transactionManager" />




</beans>